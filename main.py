import os
import subprocess
import shutil
import asyncio
import atexit  # üßπ –î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
import json  # üìñ –î–ª—è —á–∏—Ç–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö SpotDL
from datetime import datetime  # üóì –î–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó –æ–±—Ä–æ–±–æ–∫

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from dotenv import load_dotenv
from database import init_db, add_track, get_track, delete_track
import sqlite3

load_dotenv()
TOKEN = os.getenv("TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

init_db()
output_dir = "downloads"
os.makedirs(output_dir, exist_ok=True)

last_file_path = {}
temp_files = []  # üìÇ –¢–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
history_db = []  # üßæ –õ–æ–∫–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –±–∞–∑—É)

# üßº –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ

def remove_temp_files():
    for file in temp_files:
        if os.path.exists(file):
            os.remove(file)
atexit.register(remove_temp_files)

start_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üöÄ –°—Ç–∞—Ä—Ç")]],
    resize_keyboard=True
)

@router.message(Command("start"))
async def start(message: Message):
    name = message.from_user.first_name or "–¥—Ä—É–∂–µ"
    await message.answer(
        f"–ü—Ä–∏–≤—ñ—Çüëã, <b>{name}</b>!\n–ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç—Ä–µ–∫ –∑—ñ Spotify, —è –π–æ–≥–æ —Å–∫–∞—á–∞—é –π –∑–∞–ø—Ä–æ–ø–æ–Ω—É—é –æ–±—Ä–æ–±–∫—É!",
        reply_markup=start_keyboard
    )

@router.message(F.text == "üöÄ –°—Ç–∞—Ä—Ç")
async def handle_start_button(message: Message):
    await start(message)

@router.message(Command("reset"))
async def reset_track(message: Message):
    url = message.text.strip().split()
    if len(url) < 2 or "open.spotify.com/track" not in url[1]:
        await message.answer("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /reset <—Ç–≤–æ—î_–ø–æ—Å–∏–ª–∞–Ω–Ω—è_–Ω–∞_—Ç—Ä–µ–∫>")
        return
    track_id = url[1].split("/track/")[-1].split("?")[0]
    delete_track(track_id)
    await message.answer("üóë –¢—Ä–µ–∫ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏. –ú–æ–∂–µ—à –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –π–æ–≥–æ –∑–Ω–æ–≤—É.")

@router.message(Command("history"))
async def show_history(message: Message):
    user_id = message.from_user.id
    items = [entry for entry in history_db if entry["user_id"] == user_id]

    if not items:
        await message.answer("üì≠ –Ü—Å—Ç–æ—Ä—ñ—è –ø—É—Å—Ç–∞. –û–±—Ä–æ–±–∏ —Ö–æ—á –æ–¥–∏–Ω —Ç—Ä–µ–∫!")
        return

    for item in items:
        name = item["name"]
        effect = item["effect"]
        path = item["path"]
        date = item["date"]
        await message.answer_document(
            document=FSInputFile(path),
            caption=f"üéß <b>{name}</b>\nüéö –ï—Ñ–µ–∫—Ç: <i>{effect}</i>\nüóì {date}"
        )

@router.message(F.text.startswith("http"))
async def handle_link(message: Message):
    url = message.text.strip()

    if "open.spotify.com/track" not in url:
        await message.answer("‚ö†Ô∏è –ù–∞–¥—ñ—à–ª–∏ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ <b>—Ç—Ä–µ–∫</b>, –∞ –Ω–µ –ø–ª–µ–π–ª–∏—Å—Ç —á–∏ –∞—Ä—Ç–∏—Å—Ç–∞.")
        return

    await message.answer("üéµ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—é —Ç—Ä–µ–∫...")
    track_id = url.split("/track/")[-1].split("?")[0]
    existing_path = get_track(track_id)

    if existing_path:
        if os.path.exists(existing_path):
            last_file_path[message.from_user.id] = existing_path
            await send_audio_with_options(message.chat.id, existing_path)
        else:
            await message.answer("‚ùå –¢—Ä–µ–∫ –≤–∂–µ —î –≤ –±–∞–∑—ñ, –∞–ª–µ —Ñ–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ. –°–∫–∏–Ω—å —ñ–Ω—à–∏–π –∞–±–æ –∑–∞–≤–∞–Ω—Ç–∞–∂ –∑–∞–Ω–æ–≤–æ.")
        return

    spotdl_path = os.path.join(os.getcwd(), "venv", "Scripts", "spotdl.exe")

    try:
        subprocess.run([spotdl_path, url, "--output", output_dir], check=True)
        # üìñ –ü–æ—à—É–∫ –Ω–∞–∑–≤–∏ –∑ JSON –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
        metadata_path = os.path.join(output_dir, ".spotdl", "cache", "spotify", f"{track_id}.json")
        if os.path.exists(metadata_path):
            with open(metadata_path, "r", encoding="utf-8") as f:
                metadata = json.load(f)
                title = metadata.get("name")
                print(f"‚úÖ –ù–∞–∑–≤–∞ —Ç—Ä–µ–∫—É: {title}")

        mp3_files = sorted(
            [os.path.join(output_dir, f) for f in os.listdir(output_dir) if f.endswith(".mp3")],
            key=os.path.getmtime,
            reverse=True
        )
        if mp3_files:
            file_path = mp3_files[0]
            if os.path.getsize(file_path) < 1024:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑—ñ–ø—Å–æ–≤–∞–Ω–∏–π —Ñ–∞–π–ª
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –∑—ñ–ø—Å–æ–≤–∞–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
                return

            if not get_track(track_id):
                add_track(track_id, file_path)
            last_file_path[message.from_user.id] = file_path
            await send_audio_with_options(message.chat.id, file_path)

    except subprocess.CalledProcessError as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

def get_version_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ä–∏–≥—ñ–Ω–∞–ª", callback_data="original")],
        [InlineKeyboardButton(text="Speed Up", callback_data="speedup")],
        [InlineKeyboardButton(text="Slowed", callback_data="slowed")],
        [InlineKeyboardButton(text="üéö–í–ª–∞—Å–Ω–∏–π –µ—Ñ–µ–∫—Ç", callback_data="custom")],
    ])

async def send_audio_with_options(chat_id, file_path):
    await bot.send_message(chat_id, "üéµ –í–∏–±–µ—Ä–∏ –≤–µ—Ä—Å—ñ—é —Ç—Ä–µ–∫—É:", reply_markup=get_version_keyboard())
    last_file_path[chat_id] = file_path

@router.callback_query(F.data.in_(["original", "speedup", "slowed", "custom"]))
async def handle_audio_version(callback: CallbackQuery):
    version = callback.data
    user_id = callback.from_user.id

    if user_id not in last_file_path:
        await callback.message.answer("‚ùóÔ∏è –¢—Ä–µ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–∫–∏–Ω—å —â–µ —Ä–∞–∑.")
        return

    original_path = last_file_path[user_id]
    base, ext = os.path.splitext(original_path)
    modified_path = f"{base}_{version}.mp3"

    if version == "original":
        await callback.message.answer_audio(audio=FSInputFile(original_path), caption="üé∑ –û—Ä–∏–≥—ñ–Ω–∞–ª")
        return

    if version == "custom":
        await callback.message.answer(
            "‚úçÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è ffmpeg (—Ç—ñ–ª—å–∫–∏ -af —á–∞—Å—Ç–∏–Ω—É –∞–±–æ —Å–ø—Ä–æ—â–µ–Ω—É –∫–æ–º–∞–Ω–¥—É):\n"
            "<b>üîß –ü—Ä–∏–∫–ª–∞–¥–∏:</b>\n"
            "‚Ä¢ <code>+10 –±–∞—Å</code> ‚Äî –ø–æ—Ç—É–∂–Ω–∏–π –∫–∞—á –±–µ–∑ —à—É–º—É\n"
            "‚Ä¢ <code>-5 —à–≤–∏–¥–∫—ñ—Å—Ç—å</code> ‚Äî –ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ\n"
            "‚Ä¢ <code>+7 –≥—É—á–Ω—ñ—Å—Ç—å</code> ‚Äî –≥—É—á–Ω—ñ—à–µ\n"
            "‚Ä¢ <code>+15 –Ω—ñ—á–∫–æ—Ä</code> ‚Äî –ø—ñ–¥—ñ–π–º–∞—î –ø—ñ—Ç—á (—à–≤–∏–¥–∫–æ)\n"
            "<i>–ú–æ–∂–Ω–∞ –≤–≤–æ–¥–∏—Ç–∏ –∫—ñ–ª—å–∫–∞ –µ—Ñ–µ–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–º—É. –ú–∞–∫—Å–∏–º—É–º: –±–∞—Å ¬±20, –Ω—ñ—á–∫–æ—Ä ¬±20, –≥—É—á–Ω—ñ—Å—Ç—å ¬±20, —à–≤–∏–¥–∫—ñ—Å—Ç—å ¬±50.</i>",
            parse_mode="HTML"
        )
        return

    try:
        if version == "speedup":
            cmd = f'ffmpeg -y -i "{original_path}" -af "asetrate=44100*1.122462,aresample=44100,acompressor" -vn "{modified_path}"'
        elif version == "slowed":
            cmd = f'ffmpeg -y -i "{original_path}" -af "asetrate=44100*0.85,aresample=44100,acompressor" -vn "{modified_path}"'

        subprocess.run(cmd, shell=True, check=True)
        await callback.message.answer_audio(audio=FSInputFile(modified_path), caption=f"üé∂ –í–µ—Ä—Å—ñ—è: {version.capitalize()}")

    except Exception as e:
        await callback.message.answer(f"‚ùå FFmpeg error: {e}")

@router.message()
async def handle_custom_input(message: Message):
    user_id = message.from_user.id
    if user_id not in last_file_path:
        return

    text = message.text.strip()
    original_path = last_file_path[user_id]
    base, ext = os.path.splitext(original_path)
    modified_path = f"{base}_custom.mp3"

    try:
        filters = []
        if "," in text or any(x in text for x in ["–±–∞—Å", "—à–≤–∏–¥–∫—ñ—Å—Ç—å", "–Ω—ñ—á–∫–æ—Ä", "–≥—É—á–Ω—ñ—Å—Ç—å"]):
            parts = [x.strip() for x in text.split(",")]
            for part in parts:
                if "–±–∞—Å" in part:
                    value = int(part.replace("–±–∞—Å", "").strip())
                    value = max(-20, min(20, value))
                    filters.append(f"equalizer=f=90:width_type=h:width=100:g={value}")
                elif "—à–≤–∏–¥–∫—ñ—Å—Ç—å" in part:
                    value = int(part.replace("—à–≤–∏–¥–∫—ñ—Å—Ç—å", "").strip())
                    value = max(-50, min(50, value))
                    factor = 1 + (value / 100)
                    filters.append(f"asetrate=44100*{factor},aresample=44100")
                elif "–Ω—ñ—á–∫–æ—Ä" in part:
                    value = int(part.replace("–Ω—ñ—á–∫–æ—Ä", "").strip())
                    value = max(-20, min(20, value))
                    factor = 1 + (value / 100)
                    filters.append(f"asetrate=44100*{factor},aresample=44100,atempo=1.07")
                elif "–≥—É—á–Ω—ñ—Å—Ç—å" in part:
                    value = int(part.replace("–≥—É—á–Ω—ñ—Å—Ç—å", "").strip())
                    value = max(-20, min(20, value))
                    filters.append(f"volume={value}dB")

            filters.append("acompressor")
            ffmpeg_filter = ",".join(filters)
        else:
            await message.answer("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ü—Ä–∏–∫–ª–∞–¥: +10 –±–∞—Å")
            return

        cmd = f'ffmpeg -y -i "{original_path}" -af "{ffmpeg_filter}" -vn "{modified_path}"'
        subprocess.run(cmd, shell=True, check=True)
        await message.answer_audio(audio=FSInputFile(modified_path), caption="üéõ –í–ª–∞—Å–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —É—Å–ø—ñ—à–Ω–∞")

    except Exception as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())